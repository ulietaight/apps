#!/usr/bin/env bash
set -euo pipefail

# === –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ===
REPO_DIR="/root/apps"                  # –ø—É—Ç—å –∫ —Ä–µ–ø–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
PROJECT="apps"                         # –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ docker compose
ENV_FILE="$REPO_DIR/.env"              # –≥–¥–µ —Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è compose

# === autodetect compose v1/v2 ===
if command -v docker-compose >/dev/null 2>&1; then
  COMPOSE="docker-compose"
elif docker compose version >/dev/null 2>&1; then
  COMPOSE="docker compose"
else
  echo "‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–∏ v1, –Ω–∏ v2)."; exit 1
fi

cd "$REPO_DIR"
echo "üîé CWD: $(pwd)"
echo "üîé Files here:"; ls -la

# === –≤—ã–±—Ä–∞—Ç—å compose-—Ñ–∞–π–ª –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ ===
CF=""
for cand in \
  docker-compose.prod.yml \
  docker-compose.prod.yaml \
  docker-compose.yml \
  docker-compose.yaml \
  infra/docker-compose.prod.yml \
  infra/docker-compose.prod.yaml \
  infra/docker/docker-compose.prod.yml \
  infra/docker/docker-compose.prod.yaml
do
  if [ -f "$cand" ]; then CF="$cand"; break; fi
done

if [ -z "$CF" ]; then
  echo "‚ùå –ù–µ –Ω–∞—à—ë–ª compose-—Ñ–∞–π–ª."
  echo "–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∞–π–ª–æ–≤:"; find . -maxdepth 3 -type f -iname 'docker-compose*.y*' || true
  exit 1
fi
echo "üìÑ –ò—Å–ø–æ–ª—å–∑—É—é compose-—Ñ–∞–π–ª: $CF"

# === —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ GitHub Actions) ===
: "${RIOT_API_KEY:?RIOT_API_KEY not set}"   # –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω

# GHCR (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ ‚Äî –µ—Å–ª–∏ –æ–±—Ä–∞–∑—ã –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ)
GHCR_USERNAME="${GHCR_USERNAME:-}"
GHCR_TOKEN="${GHCR_TOKEN:-}"

# === –ø–∏—à–µ–º .env –¥–ª—è compose (–º–∏–Ω–∏–º—É–º RIOT_API_KEY) ===
umask 077
{
  printf "RIOT_API_KEY=%s\n" "${RIOT_API_KEY}"
  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å:
  # printf "RIOT_REGIONAL=%s\n" "${RIOT_REGIONAL:-europe}"
} > "$ENV_FILE"
echo "üìù –û–±–Ω–æ–≤–∏–ª $ENV_FILE"

# === GHCR login + pull (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –∫—Ä–µ–¥—ã) ===
if [ -n "$GHCR_USERNAME" ] && [ -n "$GHCR_TOKEN" ]; then
  echo "üîê –õ–æ–≥–∏–Ω–∏–º—Å—è –≤ GHCR..."
  echo "${GHCR_TOKEN}" | docker login ghcr.io -u "${GHCR_USERNAME}" --password-stdin
  echo "üì• –¢—è–Ω–µ–º —Å–≤–µ–∂–∏–µ –æ–±—Ä–∞–∑—ã..."
  docker pull "ghcr.io/${GHCR_USERNAME}/apps-backend:latest" || true
  docker pull "ghcr.io/${GHCR_USERNAME}/apps-frontend:latest" || true
else
  echo "‚ÑπÔ∏è –ü—Ä–æ–ø—É—Å–∫–∞—é GHCR login/pull (–Ω–µ—Ç GHCR_USERNAME/GHCR_TOKEN)"
fi

# === down / up ===
echo "üßπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å—Ç–µ–∫..."
$COMPOSE -f "$CF" -p "$PROJECT" down --remove-orphans || true

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥..."
$COMPOSE -f "$CF" --env-file "$ENV_FILE" -p "$PROJECT" up -d --pull always --no-build

# === –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–ª—é—á –ø–æ–ø–∞–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä ===
$COMPOSE -f "$CF" -p "$PROJECT" exec -T backend sh -lc 'test -n "$RIOT_API_KEY" && echo "RIOT_API_KEY=OK" || (echo "RIOT_API_KEY=MISSING"; exit 1)'

echo "üßº –ß–∏—Å—Ç–∏–º dangling-–æ–±—Ä–∞–∑—ã..."
docker image prune -f || true

echo "‚úÖ –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:"
$COMPOSE -f "$CF" -p "$PROJECT" ps
