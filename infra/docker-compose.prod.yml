version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: apps-postgres
    restart: always
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: supersecret
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U appuser -d appdb']
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7
    container_name: apps-redis
    restart: always
    ports:
      - '6379:6379'
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 10

  backend:
    image: ghcr.io/${GHCR_USERNAME}/apps-backend:latest
    container_name: apps-backend
    restart: always
    networks:
      - app-network
    ports:
      - '3000:3000'
    environment:
      DATABASE_URL: postgres://appuser:supersecret@postgres:5432/appdb
      PORT: 3000
      TRANSACTION_STRATEGY: ATOMIC 
      ISOLATION_LEVEL: 'Read Committed'
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  frontend:
    image: ghcr.io/${GHCR_USERNAME}/apps-frontend:latest
    container_name: apps-frontend
    restart: always
    ports:
      - '80:80'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data: