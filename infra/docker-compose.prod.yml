name: apps

services:
  postgres:
    image: postgres:15
    container_name: apps-postgres
    restart: always
    environment:
      POSTGRES_DB: appdb
      POSTGRES_USER: appuser
      POSTGRES_PASSWORD: supersecret
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U appuser -d appdb']
      interval: 5s
      timeout: 3s
      retries: 10
    # (опционально) не публикуем порт наружу — база доступна по сети compose

  redis:
    image: redis:7
    container_name: apps-redis
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 10
    # НЕ публикуем 6379 наружу по соображениям безопасности

  backend:
    image: ghcr.io/ulietaight/apps-backend:latest
    container_name: apps-backend
    restart: always
    networks:
      - app-network
    ports:
      - '3000:3000'
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgres://appuser:supersecret@postgres:5432/appdb
      REDIS_HOST: redis
      REDIS_PORT: 6379
      TRANSACTION_STRATEGY: ATOMIC
      ISOLATION_LEVEL: ReadCommitted
      RIOT_API_KEY: ${RIOT_API_KEY}
      RIOT_REGIONAL: europe
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    # Если образ позволяет — применим миграции перед стартом API.
    # Если у тебя свой ENTRYPOINT, эта команда его переопределит.
    # Убедись, что внутри образа есть npx/prisma и Node.
    command: >
      sh -c "npx prisma migrate deploy || true; node dist/main"
    # (опционально) healthcheck, если есть /health
    # healthcheck:
    #   test: ['CMD-SHELL', 'wget -qO- http://localhost:3000/health || exit 1']
    #   interval: 10s
    #   timeout: 3s
    #   retries: 10

  frontend:
    image: ghcr.io/ulietaight/apps-frontend:latest
    container_name: apps-frontend
    restart: always
    ports:
      - '80:80'
    networks:
      - app-network
    depends_on:
      backend:
        condition: service_started
    # (опционально) healthcheck, если nginx отдаёт / or /healthz
    # healthcheck:
    #   test: ['CMD-SHELL', 'wget -qO- http://localhost/ >/dev/null 2>&1 || exit 1']
    #   interval: 10s
    #   timeout: 3s
    #   retries: 10

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
